// 6.02.05// 7.08.05dynamic class PageArea extends MovieClip{	private static var _EventDispatchingInitialized = mx.events.EventDispatcher.initialize( PageArea.prototype );	function dispatchEvent() {}; 	function addEventListener() {}; 	function removeEventListener() {};			var numW:Number;	var numH:Number;	var VISITED:Boolean = false;	var ACTIVE_INFO:Object;	//var ActiveScreen:MovieClip;	var InActiveScreen:MovieClip;	var aryTransitions:Array;		function PageArea(){}		function init(paramObj:Object, objData:Object) {		numW = Number(paramObj.w);		numH =  Number(paramObj.h);			setNewInfo(objData);		//var objDraw = new misc.DrawShape();		//objDraw.doDraw({w:numW,h:numH, lineColor:0xffffff, lnAlpha:50},this);	};		function onMenuClick(obj:Object){		//trace("[PAGE AREA] Menu Clicked Section("+obj.id+" - "+obj.info.label+")")		setNewInfo(obj.info);	}		function setNewInfo(objData:Object){ ACTIVE_INFO = objData; 		//trace("[PAGE AREA] setNewInfo("+ACTIVE_INFO.id+" - "+ACTIVE_INFO.info.label+")")	}		function onTransitionComplete(obj:Object):Void{		(obj.begin)? startPageActivity() : setNewPage();	}			function onNewPageBuildComplete():Void{ 		trace("[PAGE AREA] onNewPageBuildComplete()");		/*if(ACTIVE_INFO.id == "0" && !VISITED){			_global.MainObj.MenuArea.entry();			ActiveScreen.objSSCtrl.playShow();		}else{*/			dispatchEvent({target:this, type:'showPage', act:false}); 			if(ACTIVE_INFO.id == "0" ){ActiveScreen.objSSCtrl.playShow();}		//}			// on the home page first time may need to reactive menu - or wait to slide in the menu - to prevent error	}		function startPageActivity():Void{		trace("[PAGE AREA] startPageActivity("+ACTIVE_INFO.id+")");				// tell externals to play?		switch(ACTIVE_INFO.id){			case "0":				//trace("HOME PAGE- VISITED?"+VISITED) 					startHomeEntry();// only call function on first visit to home					if(VISITED){						var	mcTarg = ActiveScreen.content5_mc;						var tweenCtrl = new effects.ZigoTweener();							tweenCtrl.colorTo(mcTarg, 0xffbe1a, .45, "Quad.easeIn", 0);					}					VISITED = true;						break;			case "1":				ActiveScreen.mcExternal.gotoAndPlay(2);				break;			case "2":				ActiveScreen.mcExternal3D.startSpin();				break;		} 	}		function setNewPage(id:Number, objData:Object):Void{						if(ActiveScreen != undefined){// NOTE issue with object residue after clear?					//trace("The Last Page  ["+ActiveScreen._name+"], slide show ("+ActiveScreen.objSSCtrl.SlideGroupArea._name+")")				ActiveScreen.removeClip(); 				if(ActiveScreen.objSSCtrl != undefined){ ActiveScreen.objSSCtrl.removeShow(); }								delete ActiveScreen;//remove old ??? or hide				//trace("Is the last page gone? ["+ActiveScreen._name+"] , slide show ("+ActiveScreen.objSSCtrl+")")			}							buildPage();	}				function buildPage():Void{			var objExtras:Object = new controllers.MovieClipExtras();				trace("[PAGEAREA] buildPage(columns="+aryColumns.length+" -- mcPage.bolWaitForLoad = "+mcPage.bolWaitForLoad+")");		var mcPage:MovieClip = ActiveScreen = attachMovie("EmptyClip", "page"+ACTIVE_INFO.id+"_mc", 5);//			mcPage.bolWaitForLoad = (ACTIVE_INFO.waitforload || ACTIVE_INFO.id == "0")? true : false;					generalPageBuild(mcPage);						if(!mcPage.bolWaitForLoad) onNewPageBuildComplete();// require a wait?			}				function generalPageBuild(mcPage:MovieClip):Void{		var aryColumns:Array = ACTIVE_INFO.columns;		//if(ACTIVE_INFO.waitforload) mcPage.bolWaitForLoad = true;				for(var l:Number = 0; l< aryColumns.length; l++){			var numW = (aryColumns[l].w != undefined )? Number(aryColumns[l].w) : 400;			var posCX = (aryColumns[l].x != undefined)? Number(aryColumns[l].x) : 0;			var posCY = (aryColumns[l].y != undefined)? Number(aryColumns[l].y) : 0;						var stack:Boolean = (aryColumns[l].stack == "true")? true : false;			var aryContentObjects:Array = aryColumns[l].contentobjects;						var bolReverseDepth = (aryColumns[l].reversestack)? false : true;// passed to getnextlevel()						var mcColumn = mcPage.attachMovie("EmptyClip", "column"+l+"_mc", mcPage.getNextHighestDepth(), {_x:posCX, _y:posCY});			if(aryColumns[l].ground != undefined){				var mcColumnGround:MovieClip = mcColumn.createEmptyMovieClip("columnground_mc", -500);				var objDrawCtrl = new uiadditions.DrawShape();					objDrawCtrl.doDraw(aryColumns[l].ground , mcColumnGround);			};							switch(aryColumns[l].displayas){// some might have special display needs					case "groupedlist":													addScrollList( mcColumn, aryColumns[l], numW, bolReverseDepth);					break;					case "buttonlist":						//var mcColumn = mcPage.attachMovie("EmptyClip", "column"+l+"_mc", mcPage.getNextHighestDepth(), {_x:posCX, _y:posCY});							addButtonList( mcColumn, aryColumns[l], numW, bolReverseDepth);					break;						case "column":						//var mcColumn = mcPage.attachMovie("EmptyClip", "column"+l+"_mc", mcPage.getNextHighestDepth(), {_x:posCX, _y:posCY});							addGenericColumn( mcColumn, aryColumns[l], numW, bolReverseDepth);					break;											default:						displayContentObjects( mcPage, aryContentObjects, numW, 0, stack, bolReverseDepth, aryColumns[l]);				}// end switch			if(aryColumns[l].hidden) mcColumn._visible = false;			if(aryColumns[l].refname != undefined) ActiveScreen[aryColumns[l].refname] = mcColumn;		}// end column loop 	}	 		function displayContentObjects(mc:MovieClip, ary:Array, w:Number, padY:Number, stack:Boolean, revDepth:Boolean, objCol:Object){		var objExtras = new controllers.MovieClipExtras();		if(padY == undefined) padY = 0;		var incY:Number = 0;// increment Y to stack objects		//trace("[PAGEAREA] displayContentObjects(revDepth="+revDepth+")");		if(stack == undefined) stack = false;		for(var c:Number =0; c < ary.length;c++){			var mcContent:MovieClip = mc.createEmptyMovieClip("content"+c+"_mc", objExtras.getNextLevel(revDepth,mc));						var objContent:Object = ary[c];			if(objContent.hidden)  mcContent._visible = false;						if(stack && objContent.y != undefined && c >0) incY += Number(objContent.y);						var posX:Number = (objContent.x != undefined)? Number(objContent.x) : 0;			var posY:Number = (objContent.y != undefined && !stack)? Number(objContent.y) : incY;								objExtras.setPosition({_x:posX, _y:posY}, mcContent);			//trace("----> displayContentObjects(type="+objContent.type+", content {_x:"+posX+", _y:"+posY+"})");				var mcGround:MovieClip;			if(objContent.ground != undefined)	mcGround = mcContent.createEmptyMovieClip("content"+c+"ground_mc", -500);						switch(objContent.type){				case "text" :					addTextContent(c, mcContent, objContent, w);					break;									case "button" :					var objDef = (objCol.defbutton != undefined )? objCol.defbutton : "";						addButtonContent(mcContent, objContent, w, objDef);					break;								case "slideshow" :					addSlideShowContent(mcContent, objContent);					break;				/**/				case "swf" :					addExternalContent(mcContent, objContent);					break;									case "libraryitem" :					addLibraryContent(mcContent, objContent);					break;										case "form" :					addForm(mcContent, objContent);					if(mcGround != undefined || mc._parent.columnground_mc != undefined){						var mcTarg = (mcGround != undefined)? mcGround : mc._parent.columnground_mc;							mcTarg.onRelease = function(){};							mcTarg.useHandCursor = false;					};					break;																				default:					var objDraw = new uiadditions.DrawShape();						objDraw.doDraw({w:w,h:50, fillColor:0xffffff, fillAlpha:50},mcContent);								}// end switch			if(objContent.ground != undefined){				trace("Adding ground for content area")				var objDrawCtrl = new uiadditions.DrawShape();				var objShape = objContent.ground;				var numPad = (objContent.ground.padding != undefined)? Number(objContent.ground.padding): 0;					if(objShape.w == undefined) objShape.w = mcContent._width + numPad;					if(objShape.h == undefined) objShape.h = mcContent._height + numPad;										objDrawCtrl.doDraw(objShape , mcGround);			};							incY += padY + mcContent._height;		}// end loop		}		//////////////////////////	// FUNCTIONS FOR COLUMN DISPLAY	private function addButtonList(mc:MovieClip, obj:Object, w:Number, rd:Boolean):Void{		var objExtras = new controllers.MovieClipExtras();		var ary:Array = obj.contentobjects;				var posX:Number = (obj.x != undefined)? Number(obj.x) : 0;		var posY:Number = (obj.y != undefined)? Number(obj.y) : 0;		// position the column		var mcHolder = mc.attachMovie("EmptyClip","holder_mc", mc.getNextHighestDepth());//, {_x:posX, _y:posY}		var numTopPad:Number = (obj.toppad != undefined)? Number(obj.toppad) : 0;				var incY = 0;		// need to do a spceial loop 		for(var c:Number = 0 ; c < ary.length;c++){			var objContent:Object = ary[c];			if(objContent.topmargin != undefined) incY += Number(objContent.topmargin);			var mcContent:MovieClip = mcHolder.attachMovie("EmptyClip","content"+c+"_mc", objExtras.getNextLevel(rd,mcHolder), {_y:incY});						var objContent:Object = ary[c];						if(objContent.type == "button"){				var objDef = (obj.defbutton != undefined )? obj.defbutton : "";					addButtonContent(mcContent, objContent, undefined, objDef, 2);				incY += numTopPad + 22;									}else{				if(objContent.w != undefined) w =  Number(objContent.w);				var txt = addTextContent(c, mcContent, objContent, w);				incY += numTopPad + txt._height;				};										};				//displayContentObjects(mcHolder, aryContentObjects, w, numTopPad, true, rd, obj);					};			private function addGenericColumn(mc:MovieClip, obj:Object, w:Number, rd:Boolean):Void{				var aryContentObjects:Array = obj.contentobjects;		var mcHolder = mc.attachMovie("EmptyClip","holder_mc", mc.getNextHighestDepth());//,{_x:posX, _y:posY}		var numTopPad = (obj.toppad != undefined)? Number(obj.toppad):0;		// group multiple content object into one clip inside this one?			displayContentObjects(mcHolder, aryContentObjects, w, numTopPad,obj.stack, rd, obj);		// add mask and scroller - could be arrows or bar or both? 		/*var mcMask = mc.createEmptyMovieClip("mask_mc", 10);		var objDraw = new misc.DrawShape();			objDraw.doDraw({w:numW,h:numH-20, fillColor:0xffffff, lnAlpha:50}, mcMask);			mcHolder.setMask(mcMask);*/			};				private function addScrollList(mc:MovieClip, obj:Object, w:Number, rd:Boolean):Void{				var aryContentObjects:Array = obj.contentobjects;		var posX:Number = (obj.x != undefined)? Number(obj.x) : 0;		var posY:Number = (obj.y != undefined)? Number(obj.y) : 0;		var mcHolder = mc.attachMovie("EmptyClip","holder_mc", mc.getNextHighestDepth());//,{_x:posX, _y:posY}		var numTopPad = (obj.toppad != undefined)? Number(obj.toppad):0;		// group multiple content object into one clip inside this one?		displayContentObjects(mcHolder, aryContentObjects, w, numTopPad, true, rd, obj);		// add mask and scroller - could be arrows or bar or both? 		var numMW = numW + posX;		var numMH = numH - posY - 25;		var mcMask = mc.createEmptyMovieClip("mask_mc", 10);		var objDraw = new uiadditions.DrawShape();			objDraw.doDraw({x:-posX, w:numMW,h:numMH, fillColor:0xffffff, lnAlpha:50}, mcMask);			mcHolder.setMask(mcMask);		//		if(obj.quadrants != undefined) addQuadrantScroll(Number(obj.quadrants), mc, mcHolder);			};					function addQuadrantScroll(qd:Number, mc:MovieClip, mcT:MovieClip, obj:Object){				// divide the target by number of quadrants - then each click will +/- through index of targets		var objExtras:Object = new controllers.MovieClipExtras();		var numQuadSize = Math.round(mcT._height/qd);		//trace("[PAGEAREA] addQuadrantScroll("+qd+" of "+numQuadSize+")")		mc.objScrollCtrl = {};			mc.objScrollCtrl.onButtonAction = function(obj){				var bolMove = (obj.mc._name.indexOf("up") != -1)? false : true;				if(obj.act == "release") this.moveTarget(bolMove); 			}			mc.objScrollCtrl.aryPositions = [];			mc.objScrollCtrl.mcTarget = mcT;			mc.objScrollCtrl.pindex = 0;		var p = 0;		for(var i=0;i < qd; i++, p-=numQuadSize){			mc.objScrollCtrl.aryPositions[i] = p;		};				//trace("Array of Positions["+mc.objScrollCtrl.aryPositions+"]")			mc.objScrollCtrl.moveTarget = function(d:Boolean){				if(d){ if(++this.pindex > this.aryPositions.length) this.pindex = this.aryPositions[this.aryPositions.length -1]				}else{ if(--this.pindex < 0) this.pindex = 0; };								var n:Number = 	this.pindex;				var numDest:Number = this.aryPositions[n];				//trace("Move "+this.mcTarget._name+"(n="+n+") to y:"+numDest)				var tweenCtrl = new effects.ZigoTweener();					tweenCtrl.tween(this.mcTarget, ["_y"], [numDest], .35, "Cubic.easeOut", 0);			};					var objShapeUp:Object = {w:14, h:7, fillColor:_global.MainObj.siteinfo.hex_colors[2], fillAlpha:100, shape:"triangle"};		var objShapeDown:Object = {w:14, h:7, fillColor:_global.MainObj.siteinfo.hex_colors[2], fillAlpha:100, shape:"downpoint"};				var objBtnUp:Object = {w:14, h:7, objDrawGround:objShapeUp};		var objBtnDown:Object = {w:14, h:7, objDrawGround:objShapeDown};		var posY = mc.mask_mc._height + 12;		var posX = numW - 250;		var mcUp = mc.attachMovie("ButtonClip", "upBtn_mc", objExtras.getNextLevel(true,mc), {_x:posX,_y:posY});			mcUp.init(objBtnUp);			mcUp.addEventListener("onButtonAction", mc.objScrollCtrl);		var mcDown = mc.attachMovie("ButtonClip", "downBtn_mc", objExtras.getNextLevel(true,mc), {_x: mcUp._x+mcUp._width +2, _y:posY});			mcDown.init(objBtnDown);			mcDown.addEventListener("onButtonAction", mc.objScrollCtrl);		};		///////////////////////////	// FUNCTIONS FOR CONTENT OBJECT DISPLAY		private function addTextContent(n:Number, mc:MovieClip, obj:Object, w:Number):TextField{		var objAddText = new misc.McAddText();		var tfIndex = (obj.formatindex != undefined)? Number(obj.formatindex) : 0;		var tfFormat:TextFormat = _global.MainObj.siteinfo.text_formats[tfIndex];		var strContentText:String = obj.contenttext;		if(tfFormat.tabStops != undefined && tfFormat.tabStops != null) strContentText = "<textformat tabStops='"+tfFormat.tabStops+"' >"+strContentText+"</textformat>";		var tW = (obj.txtW != undefined)? Number(obj.txtW) : w;		var objTxt:Object = {txtW:tW, txtName:"content"+n,  strTextValue:strContentText, txtFormat:tfFormat, embedFont:true, bolWrapText:true, bolSelectable:obj.selectable, strAutoSize:"left", bolHtmlText:true, bolBorder:false, bolGround:false, css:_global.MainObj.aryStyles["main"]};		var tmpText = objAddText.addTextField(objTxt, mc);						return tmpText;	};				private function addExternalContent(mc:MovieClip, obj:Object):Void{		//var objDraw = new misc.DrawShape();		var strFileURL = obj.imageurl;// !!! need to go back to ref?		var objRef = this;		var strRefName = (obj.refname != undefined)? obj.refname : "mcExternal";		var mcHolder = ActiveScreen[strRefName] = mc.createEmptyMovieClip("holder_mc", 1);		var loadMng = new managers.ImageManager();						if(obj.callback){				mc.onLoadComplete = function(args){					loadMng.removeMyListener(this);					objRef.onNewPageBuildComplete(mc)				}			}else{				mc.onLoadComplete = function(args){					loadMng.removeMyListener(this);				};			};						loadMng.callTheLoad(mcHolder, strFileURL, mc);//	};					private function addLibraryContent(mc:MovieClip, obj:Object):Void{			mc.attachMovie(obj.clipid, "libclip_mc", 1);	};				private function addButtonContent(mc:MovieClip, obj:Object, w:Number, defObj:Object, s:Number, dpth:Number):MovieClip{				var objButton:Object = (obj.button != undefined )? obj.button : defObj;		var tfIndex = (obj.formatindex != undefined)? Number(obj.formatindex) : 0;		var tfFormat:TextFormat = _global.MainObj.siteinfo.text_formats[tfIndex];		//trace("++ addButtonContent(mc:"+mc._name+", button obj:{"+objButton+"}) ");					if(objButton.w != undefined ) objButton.w = Number(objButton.w) ;			if(objButton.h != undefined ) objButton.h = Number(objButton.h);			if(dpth == undefined ) dpth = 1;			//objButton.w = (obj.w != undefined && objButton.w == undefined)?  Number(obj.w) : Number(objButton.w);			//objButton.h = (obj.h != undefined && objButton.h == undefined)?  Number(obj.h) : Number(objButton.h);					if(obj.strLabel != undefined) objButton.strLabel = obj.strLabel;			objButton.formatObj = tfFormat;		var strClipID:String = (obj.clipid != undefined)? obj.clipid : "ButtonClip";		var mcButton:MovieClip = mc.attachMovie(strClipID, "button_mc", dpth);			mcButton.init(objButton);				if( obj.enabled == false) mcButton.enabled = false;					// sound effect		var sId:Number;			if(s != undefined) sId = s;		if(objButton.soundindex != undefined) sId = Number(objButton.soundindex);					if(sId != undefined ){			var objSndListen:Object = {};				objSndListen.sId = sId;				objSndListen.onButtonAction = function(obj){ 					if(obj.act=="over" && this.sId != undefined){ _global.MainObj.objNavSoundMan.playSound(this.sId);}				};							mcButton.addEventListener("onButtonAction", objSndListen);		};						// link		if(obj.linkurl != undefined){			mc.strLink = obj.linkurl;			mc.ReportID = (obj.reportid != undefined)? obj.reportid : objButton.strLabel;			mc.strTarget = (obj.linktarget != undefined)? obj.linktarget : "";			mcButton.addEventListener("onButtonAction", mc);			mc.onButtonAction = function(obj:Object){ 				if(obj.act=="release") trace("["+this.strLink+"]");				if(obj.act=="release"){ getURL(this.strLink, this.strTarget) ; _global.MainObj.reportClick(this.ReportID);}				//if(obj.act=="over" && mc.sId != undefined) _global.MainObj.objNavSoundMan.playSound(mc.sId);			};					}else{			mcButton.addEventListener("onButtonAction", mc);			if(obj.functioncall != undefined){				mc.strFunction = obj.functioncall;				if(obj.functionparam != undefined) mc.funcParam = obj.functionparam;			};			if(obj.noreport == undefined) mc.ReportID = (obj.reportid != undefined)? obj.reportid : objButton.strLabel;			mc.onButtonAction = function(obj:Object){ 				if(obj.act == "release"){					if(this.ReportID != undefined) _global.MainObj.reportClick(this.ReportID); 					if(this.strFunction != undefined) _global.MainObj.PageArea[this.strFunction](this.funcParam);}				//if(obj.act=="over" && mc.sId != undefined) _global.MainObj.objNavSoundMan.playSound(mc.sId);			};		};								// special effect		switch(objButton.spacialtween){				case "shrink":				mc.objEfctListen = {};					mc.objEfctListen.onButtonAction = function(obj){ 						var tweenCtrl = new effects.ZigoTweener();						if(obj.act =="over"){							tweenCtrl.tween(obj.mc.art_mc.borderOut_mc,["_xscale","_yscale"],[96,96],.3,"Quad.easeIn", 0);							tweenCtrl.tween(obj.mc.art_mc.backDrop_mc,["_xscale","_yscale"],[96,96],.3,"Quad.easeIn", 0);						};												if(obj.act =="out"){							tweenCtrl.tween(obj.mc.art_mc.borderOut_mc,["_xscale","_yscale"],[100,100],.4,"Quad.easeIn", 0);							tweenCtrl.tween(obj.mc.art_mc.backDrop_mc,["_xscale","_yscale"],[100,100],.4,"Quad.easeIn", 0);						};											};									mcButton.addEventListener("onButtonAction", mc.objEfctListen);								break;				};									return mcButton;	};					private function addSlideShowContent(mc:MovieClip, obj:Object):Void{		//trace("[PAGEAREA] addSlideShowContent(timer:"+obj.timer+")")		//var objtrans = {_IN:{targ:[100], ease:"Quad.easeIn", dur:.55}, _OUT:{ targ:[0], ease:"Back.easeOut", dur:.45 }, _PROPS:["_alpha"]};		var objtrans = {_IN:{targ:[100], ease:"Quad.easeIn", dur:.55}, _OUT:{ targ:[0,25,25], ease:"Quad.easeOut", dur:.85, delay:.05 }, _PROPS:["_alpha","_xscale"]};					var numW:Number = Number(obj.w);		var numH:Number = Number(obj.h);		var objExtras = new controllers.MovieClipExtras();		var numInterval:Number = (obj.delay != undefined)? Number(obj.delay)*1000: undefined;		var objShow:Object = {			mcTarget:mc, w:numW, h:numH, aryData:obj.slides,			bolPreload:obj.preload, bolShowLoader:obj.loader, bolAddGround:obj.ground,   			bolEffectClip:obj.effectclipid, bolMask:false, objGroundShape:obj.groundshape, 			numSlideInterval:numInterval, objLoaderPos:{x:numW/2,y:numH/2},			objLoader:obj.loaderinfo, objTweenInfo:objtrans		}; 		//obj.mask			var objShowCtrl = ActiveScreen.objSSCtrl = new controllers.SlideShow();						if( ACTIVE_INFO.id == 0 ){//&& !VISITED				var ObjRef = this;				ActiveScreen.onShowReady = function(){ ObjRef.onNewPageBuildComplete(); };			}else{				ActiveScreen.onShowReady = function(){ objShowCtrl.playShow(); }			}												objShowCtrl.addEventListener("onShowReady", ActiveScreen);			//objShowCtrl.init(objShow);					//if(obj.clipid != undefined ){ mc.attachMovie(obj.clipid, "libclip_mc", objExtras.getNextlevel(false,mc));	}							////////////////////////////////////////////			//trace("[PAGEAREA] ACTIVE_INFO.id="+ACTIVE_INFO.id +",  VISITED =="+VISITED)			if(ACTIVE_INFO.id == "0" && !VISITED){								objShowCtrl.addEventListener("onSlideLoad", ActiveScreen);				objShowCtrl.addEventListener("onSlideLoopComplete", ActiveScreen);				objShowCtrl.addEventListener("onSlideAdvance", ActiveScreen);								ActiveScreen.onSlideLoad = function(obj){					//					var tmpId = Number(obj.info.txtId);					var mcTarg = obj.info.mcTextClip = this["content"+tmpId+"_mc"];					var numX = Number(obj.info.txtStartX);					var numY = Number(obj.info.txtStartY);											mcTarg._x = numX;						mcTarg._y = numY;						var tweenCtrl = new effects.ZigoTweener();						tweenCtrl.colorTo(mcTarg, 0xffbe1a, .05, "Quad.easeIn", 0);					//obj.slide._x = (obj.id%2)? 360: -360;					//ary:arySlides, id:n, slide: arySlides[n].SlideClip});					//trace("[PAGEAREA] pre position["+targetPath(mcTarg)+"]-  Slide index = "+obj.id+" - ")				}								ActiveScreen.animateHomePage = function(){					//trace("[PAGEAREA] animateHomePage() -");//if(!ActiveScreen.STOPSLIDES) 					clearInterval(ActiveScreen.HOMEINTERVAL)					ActiveScreen.objSSCtrl.advanceToSlide();									}												ActiveScreen.onSlideAdvance = function(obj){					var tweenCtrl = new effects.ZigoTweener();					var numX = Number(obj.info.txtDestX);					var numY = Number(obj.info.txtDestY);										var mcTarg:MovieClip = obj.info.mcTextClip;					var objCallBack:Object = (obj.current == 3)? {func:_global.MainObj.MenuArea.entry, scope:_global.MainObj.MenuArea} : {};						tweenCtrl.tween(mcTarg ,["_x","_y"], [numX, numY], 1.3,"Back.easeOut", 0, objCallBack, .5);										//					if(obj.current < 3) this.HOMEINTERVAL = setInterval(this, "animateHomePage", 2500);													//trace("Previous Index="+obj.previous+", current="+obj.current+" ary.length-1 = " +obj.ary.length-1)					if(obj.previous != 3){						var mcPrev:MovieClip = obj.ary[obj.previous].mcTextClip;						 tweenCtrl.colorTo(mcPrev, 0xffffff, .6, "Quad.easeIn", .2);					}										// reset previos to start state??						//obj.ary[obj.previous].SlideClip										//ary:arySlides,  current:numSlideIndex, info:arySlides[numSlideIndex], previous:numPreviousIndex				}												/*				ActiveScreen.onSlideLoopComplete = function(obj){					trace("[PAGEAREA]ActiveScreen.onSlideLoopComplete ");					if(obj.atBegin){						ActiveScreen.STOPSLIDES= true; 						clearInterval(this.HOMEINTERVAL);					}								}*/							}		   ///////////////////////////		   objShowCtrl.init(objShow);					if(obj.clipid != undefined ){ mc.attachMovie(obj.clipid, "libclip_mc", objExtras.getNextlevel(false,mc));	}	}						private function addForm(mcContent, objContent):Void{		var objExtras = new controllers.MovieClipExtras();				var objFormInfo:Object = objContent;				// default element info		var tfIndex:Number = (obj.formatindex != undefined)? Number(obj.formatindex) : 0;			objFormInfo.inputformat = _global.MainObj.siteinfo.text_formats[tfIndex];					objFormInfo.elementW = (objContent.elementW != undefined)? Number(objContent.elementW) : 50;			objFormInfo.elementH = (objContent.elementH != undefined)? Number(objContent.elementH) : 15;						// block and alert		if(objFormInfo.blockerArea == undefined) objFormInfo.blockerArea = {fillColor:0xffffff, fillAlpha:10, lnSize:1, lnColor:0xffffff, lnAlpha:1}			objFormInfo.blockerArea.w = Number(objFormInfo.w);			objFormInfo.blockerArea.h = Number(objFormInfo.h);			objFormInfo.processPath = _global.MainObj.strProcessPath;		var tfTitleIndex:Number = (objLabelText.alerttitleformatindex != undefined)? Number(objLabelText.alerttitleformatindex) : 0;			objFormInfo.alertTitleFormat = _global.MainObj.siteinfo.text_formats[tfTitleIndex];				var tfMsgIndex:Number = (objLabelText.alertmsgformatindex != undefined)? Number(objLabelText.alertmsgformatindex) : 0;			objFormInfo.alertMsgFormat = _global.MainObj.siteinfo.text_formats[tfMsgIndex]						// buttons		if(objFormInfo.buttonsubmit == undefined) objFormInfo.buttonsubmit = {w:91, padding:0, txttoppad:-1, 				bolGround:true, bolFader:true, bolBorder:true, bolTextMc:true, strLabel:"SUBMIT",				txtcolor:0x333333, txtovercolor:0x000000, 				txtdowncolor:0x333333, objDrawGround:objBtnGround, objDrawFader:objBtnFader,  objDrawBorder:objBtnBorder,				bolWrap:false, bolMultiline:false, strAutoSize:"center", bolAutoSizeLabel:true,  bolEmbedfont:true, mcText:true, 				numFaderInTime:.15, numFaderOutTime:.25 };					var tfBtnIndex:Number = (objFormInfo.buttonsubmit.formatindex != undefined)? Number(objFormInfo.buttonsubmit.formatindex) : 0;			objFormInfo.buttonsubmit.formatObj = _global.MainObj.siteinfo.text_formats[tfBtnIndex];		if(objContent.buttonclear != undefined){					var tfBtnIndex:Number = (objClearButton.formatindex != undefined)? Number(objClearButton.formatindex) : 0;					objContent.buttonclear.formatObj = _global.MainObj.siteinfo.text_formats[tfBtnIndex];			};								// add the form holder clip		var mcForm = mcContent.attachMovie("FormHolder", "formHolder_mc", objExtras.getNextLevel(true, mcContent));				mcForm.init(objFormInfo);				mcForm.FormManager.addEventListener("onSubmitComplete", mcForm);					if(objContent.closebutton != undefined){			var mcCloseBtn:MovieClip = addButtonContent(mcContent._parent, objContent.closebutton , 450, objContent.closebutton, undefined, 1000);				mcCloseBtn._x = Number(objContent.closebutton.x);			mcCloseBtn._y = Number(objContent.closebutton.y);		};				// add function to this content object				mcForm.onSubmitComplete = function(){};						if(objFormInfo.reportid != undefined){				mcForm.onSubmitComplete = function(){					_global.MainObj.reportClick(objFormInfo.reportid);				};			}	}			// group multiple content object into one clip	private function addListingContent(mc:MovieClip, obj:Object):Void{		var objDraw = new uiadditions.DrawShape();		objDraw.doDraw({w:50,h:50, fillColor:0xfcccff, fillAlpha:50},mc);	}				////////////////////////////////////////////	// PROJECT SPECIFIC FUNCTIONS FOR DISPLAY		function displayTellFriend(b:Boolean):Void{		if(b == undefined) b = true;		trace("displayTellFriend");		ActiveScreen.friendForm._visible = b;			};		/** end class **/};